{"ast":null,"code":"var _jsxFileName = \"/Users/thoanguyen/Desktop/React Zendvn/Firebase/Task Manager/my-app/src/Components/TaskFinishList.js\";\nimport React, { Component } from 'react';\nimport TaskFinishItem from './../Components/TaskFinishItem';\nimport TaskFinishItemAdmin from './../Components/TaskFinishItemAdmin';\nimport { tasksCompletedRef } from './../firebase';\nimport { actChangeNotify } from './../actions/index';\nimport { connect } from 'react-redux';\nimport * as notify from './../constants/Notify';\n\nclass TaskFinishList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClear = () => {\n      tasksCompletedRef.set([]);\n      this.props.changeNotify(notify.NOTI_TYPE_WARNING, notify.NOTI_CLEARALL_TASK_TITLE, notify.NOTI_CLEARALL_TASK_MESSAGE);\n    };\n\n    this.state = {\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    tasksCompletedRef.on('value', items => {\n      let data = [];\n      items.forEach(item => {\n        const {\n          email,\n          name\n        } = item.val();\n        data.push({\n          email,\n          name,\n          key: item.key\n        });\n      });\n      this.setState({\n        items: data\n      });\n    });\n  }\n\n  render() {\n    let {\n      items\n    } = this.state;\n    let {\n      user\n    } = this.props;\n    let isAdmin = this.props.user.info;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"panel panel-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"panel-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"panel-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }\n    }, \"Task Finish\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"panel-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 19\n      }\n    }, this.showElementBody(items, isAdmin)), this.showElementFooter(isAdmin));\n  }\n\n  showElementFooter(isAdmin) {\n    if (isAdmin === true) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"panel-footer text-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.handleClear,\n        type: \"button\",\n        className: \"btn btn-danger mt-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }\n      }, \"Clear All\"));\n    }\n  }\n\n  showElementBody(items, isAdmin) {\n    let xhml = null;\n\n    if (items.length > 0) {\n      xhml = items.map((item, index) => {\n        if (isAdmin === true) {\n          return /*#__PURE__*/React.createElement(TaskFinishItemAdmin, {\n            changeNotify: this.props.changeNotify,\n            key: index,\n            item: item,\n            index: index,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 21\n            }\n          });\n        } else {\n          return /*#__PURE__*/React.createElement(TaskFinishItem, {\n            changeNotify: this.props.changeNotify,\n            key: index,\n            item: item,\n            index: index,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 21\n            }\n          });\n        }\n      });\n      return xhml;\n    } else {\n      return /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 16\n        }\n      }, \"Loading\");\n    }\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeNotify: (style, title, content) => {\n      dispatch(actChangeNotify(style, title, content));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(TaskFinishList);","map":{"version":3,"sources":["/Users/thoanguyen/Desktop/React Zendvn/Firebase/Task Manager/my-app/src/Components/TaskFinishList.js"],"names":["React","Component","TaskFinishItem","TaskFinishItemAdmin","tasksCompletedRef","actChangeNotify","connect","notify","TaskFinishList","constructor","props","handleClear","set","changeNotify","NOTI_TYPE_WARNING","NOTI_CLEARALL_TASK_TITLE","NOTI_CLEARALL_TASK_MESSAGE","state","items","componentDidMount","on","data","forEach","item","email","name","val","push","key","setState","render","user","isAdmin","info","showElementBody","showElementFooter","xhml","length","map","index","mapDispatchToProps","dispatch","style","title","content"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport TaskFinishItem from './../Components/TaskFinishItem';\nimport TaskFinishItemAdmin from './../Components/TaskFinishItemAdmin';\nimport {tasksCompletedRef} from './../firebase';\nimport {actChangeNotify} from './../actions/index';\nimport {connect} from 'react-redux';\nimport * as notify from './../constants/Notify'; \nclass TaskFinishList extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      items:[]\n    }\n  }\n  componentDidMount(){\n    tasksCompletedRef.on('value',items =>{\n      let data = [];\n    items.forEach(item=>{\n      const {email,name} = item.val();\n      data.push({email,name,key:item.key})\n    })\n    this.setState({\n      items:data\n    })\n    })}\n    handleClear = () =>{\n      tasksCompletedRef.set([])\n      this.props.changeNotify(notify.NOTI_TYPE_WARNING,notify.NOTI_CLEARALL_TASK_TITLE,notify.NOTI_CLEARALL_TASK_MESSAGE)\n    }\n    render() {\n      let {items} = this.state;  \n      let {user} = this.props;\n      let isAdmin = this.props.user.info; \n        return (\n           \n                 <div className=\"panel panel-success\">\n                  <div className=\"panel-heading\">\n                    <h3 className=\"panel-title\">Task Finish</h3></div>\n                  <div className=\"panel-body\">\n                   {this. showElementBody(items,isAdmin)}\n                  </div>\n                 {this.showElementFooter(isAdmin)}\n                </div>\n        );\n    }\n    showElementFooter(isAdmin){\n      if(isAdmin === true){\n        return (\n          <div className=\"panel-footer text-right\">\n          <button onClick={this.handleClear} type=\"button\" className=\"btn btn-danger mt-3\">Clear All</button>\n                </div>\n        )\n      }\n    }\n    showElementBody(items,isAdmin){\n      let xhml = null;\n      if(items.length >0){\n        xhml = items.map((item,index)=>{\n          if(isAdmin === true){\n            return  <TaskFinishItemAdmin changeNotify={this.props.changeNotify} key={index} item={item} index={index}/>\n          } else {\n            return  <TaskFinishItem changeNotify={this.props.changeNotify} key={index} item={item} index={index}/>\n          }\n        })\n        return xhml \n      } else {\n        return <h4>Loading</h4>}\n    }\n}\n\nconst mapDispatchToProps = (dispatch)=>{\n  return {\n    changeNotify:(style,title,content)=>{\n      dispatch(actChangeNotify(style,title,content))\n    }\n  }\n}\n\nexport default connect(null,mapDispatchToProps)(TaskFinishList)\n\n"]},"metadata":{},"sourceType":"module"}