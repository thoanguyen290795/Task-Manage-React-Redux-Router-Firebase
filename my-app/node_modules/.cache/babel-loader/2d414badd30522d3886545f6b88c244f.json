{"ast":null,"code":"var _jsxFileName = \"/Users/thoanguyen/Desktop/React Zendvn/Firebase/Task Manager/my-app/src/Components/TaskFinishListAdmin.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport TaskFinishItemAdmin from './../Components/TaskFinishItemAdmin';\nimport { tasksCompletedRef } from './../firebase';\nimport { actChangeNotify } from './../actions/index';\nimport * as notify from './../constants/Notify';\n\nclass TaskFinishListAdmin extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClear = () => {\n      tasksCompletedRef.set([]);\n      this.props.changeNotify(notify.NOTI_TYPE_WARNING, notify.NOTI_CLEARALL_TASK_TITLE, notify.NOTI_CLEARALL_TASK_MESSAGE);\n    };\n\n    this.state = {\n      items: [],\n      isMounted: false\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    tasksCompletedRef.on('value', items => {\n      let data = [];\n      items.forEach(item => {\n        const {\n          email,\n          name\n        } = item.val();\n        data.push({\n          email,\n          name,\n          key: item.key\n        });\n      });\n      this.setState({\n        items: data,\n        isMounted: true\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.setState({\n      isMounted: false\n    });\n  }\n\n  render() {\n    let {\n      items\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"panel panel-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 22\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"panel-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"panel-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 25\n      }\n    }, \"Task Finish\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"panel-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 23\n      }\n    }, this.showElementBody(items)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"panel-footer text-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClear,\n      type: \"button\",\n      className: \"btn btn-danger mt-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 15\n      }\n    }, \"Clear All\")));\n  }\n\n  showElementBody(items, isAdmin) {\n    let xhml = null;\n\n    if (items.length > 0) {\n      xhml = items.map((item, index) => {\n        return /*#__PURE__*/React.createElement(TaskFinishItemAdmin, {\n          changeNotify: this.props.changeNotify,\n          key: index,\n          item: item,\n          index: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }\n        });\n      });\n      return xhml;\n    } else {\n      return /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 20\n        }\n      }, \"Loading\");\n    }\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeNotify: (style, title, content) => {\n      dispatch(actChangeNotify(style, title, content));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(TaskFinishListAdmin);","map":{"version":3,"sources":["/Users/thoanguyen/Desktop/React Zendvn/Firebase/Task Manager/my-app/src/Components/TaskFinishListAdmin.js"],"names":["React","Component","connect","TaskFinishItemAdmin","tasksCompletedRef","actChangeNotify","notify","TaskFinishListAdmin","constructor","props","handleClear","set","changeNotify","NOTI_TYPE_WARNING","NOTI_CLEARALL_TASK_TITLE","NOTI_CLEARALL_TASK_MESSAGE","state","items","isMounted","UNSAFE_componentWillMount","on","data","forEach","item","email","name","val","push","key","setState","componentWillUnmount","render","showElementBody","isAdmin","xhml","length","map","index","mapDispatchToProps","dispatch","style","title","content"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport TaskFinishItemAdmin from './../Components/TaskFinishItemAdmin';\nimport {tasksCompletedRef} from './../firebase';\nimport {actChangeNotify} from './../actions/index';\nimport * as notify from './../constants/Notify'; \nclass TaskFinishListAdmin extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n          items:[],\n          isMounted: false\n        }\n      }\n      UNSAFE_componentWillMount(){\n        tasksCompletedRef.on('value',items =>{\n          let data = [];\n        items.forEach(item=>{\n          const {email,name} = item.val();\n          data.push({email,name,key:item.key})\n        })\n        this.setState({\n          items:data,\n          isMounted: true\n        })\n        })\n\n        }\n      componentWillUnmount(){\n        this.setState({\n          isMounted:false\n        })\n    }\n  \n        handleClear = () =>{\n          tasksCompletedRef.set([])\n          this.props.changeNotify(notify.NOTI_TYPE_WARNING,notify.NOTI_CLEARALL_TASK_TITLE,notify.NOTI_CLEARALL_TASK_MESSAGE)\n        }\n        render() {\n          let {items} = this.state;  \n            return (\n               \n                     <div className=\"panel panel-success\">\n                      <div className=\"panel-heading\">\n                        <h3 className=\"panel-title\">Task Finish</h3></div>\n                      <div className=\"panel-body\">\n                       {this. showElementBody(items)}\n                      </div>\n                      <div className=\"panel-footer text-right\">\n              <button onClick={this.handleClear} type=\"button\" className=\"btn btn-danger mt-3\">Clear All</button>\n                    </div>\n                    </div>\n            );\n        }\n      \n        showElementBody(items,isAdmin){\n          let xhml = null;\n          if(items.length >0){\n            xhml = items.map((item,index)=>{\n                return  <TaskFinishItemAdmin changeNotify={this.props.changeNotify} key={index} item={item} index={index}/>          \n            })\n            return xhml \n          } else {\n            return <h4>Loading</h4>}\n        }\n    }\n\n    \n    const mapDispatchToProps = (dispatch)=>{\n      return {\n        changeNotify:(style,title,content)=>{\n          dispatch(actChangeNotify(style,title,content))\n        }\n      }\n}\nexport default connect(null,mapDispatchToProps)(TaskFinishListAdmin)\n\n"]},"metadata":{},"sourceType":"module"}